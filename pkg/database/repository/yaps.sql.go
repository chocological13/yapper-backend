// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: yaps.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createYap = `-- name: CreateYap :one
INSERT INTO yaps (
  user_id,
  content,
  media,
  hashtags,
  mentions,
  location_point
) VALUES (
  $1, $2, $3, $4, $5,
  CASE
    WHEN $6::DOUBLE PRECISION IS NOT NULL AND $7::DOUBLE PRECISION IS NOT NULL
    THEN ST_SetSRID(ST_MakePoint($7::DOUBLE PRECISION, $6::DOUBLE PRECISION), 4326)
    ELSE NULL
  END
)
RETURNING
  yap_id,
  user_id,
  content,
  media,
  hashtags,
  mentions,
  ST_X(location_point::geometry) as longitude,
  ST_Y(location_point::geometry) as latitude,
  created_at
`

type CreateYapParams struct {
	UserID   pgtype.UUID
	Content  string
	Media    []byte
	Hashtags []string
	Mentions []string
	Column6  float64
	Column7  float64
}

type CreateYapRow struct {
	YapID     pgtype.UUID
	UserID    pgtype.UUID
	Content   string
	Media     []byte
	Hashtags  []string
	Mentions  []string
	Longitude interface{}
	Latitude  interface{}
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateYap(ctx context.Context, arg CreateYapParams) (CreateYapRow, error) {
	row := q.db.QueryRow(ctx, createYap,
		arg.UserID,
		arg.Content,
		arg.Media,
		arg.Hashtags,
		arg.Mentions,
		arg.Column6,
		arg.Column7,
	)
	var i CreateYapRow
	err := row.Scan(
		&i.YapID,
		&i.UserID,
		&i.Content,
		&i.Media,
		&i.Hashtags,
		&i.Mentions,
		&i.Longitude,
		&i.Latitude,
		&i.CreatedAt,
	)
	return i, err
}

const deleteYap = `-- name: DeleteYap :exec
UPDATE yaps
SET deleted_at = NOW()
WHERE yap_id = $1
AND user_id = $2
AND deleted_at IS NULL
`

type DeleteYapParams struct {
	YapID  pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) DeleteYap(ctx context.Context, arg DeleteYapParams) error {
	_, err := q.db.Exec(ctx, deleteYap, arg.YapID, arg.UserID)
	return err
}

const getYapByID = `-- name: GetYapByID :one
SELECT yap_id, user_id, content, created_at, updated_at, deleted_at, media, hashtags, mentions, location_point
FROM yaps
WHERE yap_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetYapByID(ctx context.Context, yapID pgtype.UUID) (Yap, error) {
	row := q.db.QueryRow(ctx, getYapByID, yapID)
	var i Yap
	err := row.Scan(
		&i.YapID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Media,
		&i.Hashtags,
		&i.Mentions,
		&i.LocationPoint,
	)
	return i, err
}

const listYapsByUser = `-- name: ListYapsByUser :many
SELECT yap_id, user_id, content, created_at, updated_at, deleted_at, media, hashtags, mentions, location_point
FROM yaps
WHERE user_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT COALESCE($2, 20) OFFSET COALESCE($3, 0)
`

type ListYapsByUserParams struct {
	UserID  pgtype.UUID
	Column2 interface{}
	Column3 interface{}
}

func (q *Queries) ListYapsByUser(ctx context.Context, arg ListYapsByUserParams) ([]Yap, error) {
	rows, err := q.db.Query(ctx, listYapsByUser, arg.UserID, arg.Column2, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Yap
	for rows.Next() {
		var i Yap
		if err := rows.Scan(
			&i.YapID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Media,
			&i.Hashtags,
			&i.Mentions,
			&i.LocationPoint,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateYap = `-- name: UpdateYap :one
UPDATE yaps
SET content = $2
WHERE yap_id = $1
AND user_id = $3
AND deleted_at IS NULL
RETURNING yap_id, user_id, content, created_at, updated_at, deleted_at, media, hashtags, mentions, location_point
`

type UpdateYapParams struct {
	YapID   pgtype.UUID
	Content string
	UserID  pgtype.UUID
}

func (q *Queries) UpdateYap(ctx context.Context, arg UpdateYapParams) (Yap, error) {
	row := q.db.QueryRow(ctx, updateYap, arg.YapID, arg.Content, arg.UserID)
	var i Yap
	err := row.Scan(
		&i.YapID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Media,
		&i.Hashtags,
		&i.Mentions,
		&i.LocationPoint,
	)
	return i, err
}
