// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = NOW(),
    updated_at = NOW()
WHERE user_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) DeleteUser(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, email, password, created_at, updated_at, deleted_at FROM users
WHERE user_id = $1 OR username = $2 OR email = $3
AND deleted_at IS NULL
`

type GetUserParams struct {
	UserID   pgtype.UUID
	Username string
	Email    string
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRow(ctx, getUser, arg.UserID, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const newUser = `-- name: NewUser :one
insert into users (username, email, password) values ($1, $2, $3) returning email
`

type NewUserParams struct {
	Username string
	Email    string
	Password string
}

func (q *Queries) NewUser(ctx context.Context, arg NewUserParams) (string, error) {
	row := q.db.QueryRow(ctx, newUser, arg.Username, arg.Email, arg.Password)
	var email string
	err := row.Scan(&email)
	return email, err
}

const updateEmail = `-- name: UpdateEmail :one
UPDATE users
SET email = $2,
    updated_at = now()
WHERE user_id = $1 AND deleted_at IS NULL
RETURNING user_id, username, email, password, created_at, updated_at, deleted_at
`

type UpdateEmailParams struct {
	UserID pgtype.UUID
	Email  string
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, updateEmail, arg.UserID, arg.Email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET password = $2,
    updated_at = NOW()
WHERE user_id = $1 AND deleted_at IS NULL
`

type UpdatePasswordParams struct {
	UserID   pgtype.UUID
	Password string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.UserID, arg.Password)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = COALESCE($2, username),
    -- Add other non-sensitive fields here as needed if the users table grows
    updated_at = now()
WHERE user_id = $1 AND deleted_at IS NULL
RETURNING user_id, username, email, password, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	UserID   pgtype.UUID
	Username string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.UserID, arg.Username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
